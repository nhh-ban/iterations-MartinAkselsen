res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>%
as.tibble()
# Allright - let's try submitting the query:
stations <-GQL
length(stations)
length(stations[[1]])
library(purrr)
library(tidyverse)
# Introductory examples ------
## Iterating over columns ------
df <-
tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10),
e = rnorm(10)
)
# We can calculate the medians manually for each column:
median(df$a)
median(df$b)
median(df$c)
median(df$d)
median(df$e)
# Or we can write a function iterating over the columns:
col_summary <- function(df, fun) {
out <- vector("double", length(df))
for (i in seq_along(df)) {
out[i] <- fun(df[[i]])
}
out
}
col_summary(df, mean)
col_summary(df, median)
## map-functions ------
#The problem above can be solved with the map-function
map(df, mean)
map_dbl(df, mean)
# Combine funcions to present the result in a data frame
df %>%
map(mean, trim = .1) %>%
bind_cols()
# Example on how to use map
mtcars %>%  # Use the built in df cars
split( ~ cyl) %>% # Split the data into a list of data frames, based on the cyl-column
map({
\(x)lm(mpg ~ wt, data = x) # apply linear regression on each data frame
}) %>%
map(summary) %>% # summarise the regression models
map({
\(x) x$r.squared # Extract the r^2 values
}) %>%
bind_cols() #combine them into one data frame
## Dealing with errors ------
x <- list(1, 10, "a")
y <- x %>% map(log)
# Allright - let's try submitting the query:
stations <-GQL
length(stations)
length(stations[[1]])
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>%
as.tibble()
stations()
# Allright - let's try submitting the query:
stations <-GQL(qry)
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>%
as.tibble()
# Transform into data frame
stations[[1]] %>%
map(as_tibble) %>%
list_rbind
# Transform into data frame
stations[[1]] %>%
map(as_tibble) %>%
list_rbind
stations[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
head(1) %>%
select(latestData) %>%
pull()
# Mutate latestData into a character vector
stations[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
mutate(latestData = map_chr(latestData, 1))
unlist_safe <-
function(x){
x <- unlist(x)
if(is.null(x)){
return(NA_character_)
}else{
return(x)
}
}
stations[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, unlist_safe))
# Transform into data frame
stations[[1]] %>%
map(as_tibble) %>%
list_rbind
stations[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
head(1) %>%
select(latestData) %>%
pull()
stations[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
mutate(latestData = map_chr(latestData, 2))
# Mutate latestData into a character vector
stations[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
mutate(latestData = map_chr(latestData, 1))
# Alternative solution
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, 1, .default = NA_character_)
)
# Alternative solution
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, 2, .default = NA_character_)
)
# Alternative solution
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, "volumeByDay", .default = NA_character_)
)
# Alternative solution
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, "volumeByDay", .default = NA_character_)
)
# Alternative solution
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, 1, .default = NA_character_)
)
# Format the date column latestData
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin"))
# Format the location-colums
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
# Format the date column latestData
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location)
# Format the date column latestData
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
unnest_wider(location) %>%
unnest_wider(latLon)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
library(httr)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
library(readr)
library(yaml)
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
setwd("~/Documents/H23/BAN400/iterations/iterations-MartinAkselsen")
# Load function for posting GQL-queries and retrieving data:
source("functions/GQL_function.r")
configs <-
read_yaml("vegvesen_configs.yml")
gql_metadata_qry <- read_file("gql-queries/station_metadata.gql")
stations_metadata <-
GQL(
query=gql_metadata_qry,
.url = configs$vegvesen_url
)
stations_metadata
View(stations_metadata)
View(stations_metadata)
transform_metadata_to_df <- function(stations_metadata) {
# Convert list to tibble
df <- as_tibble(stations_metadata)
# Convert latestData to datetime and then to UTC
df$latestData <- ymd_hms(df$latestData, tz = "UTC")
return(df)
}
transform_metadata_to_df(stations_metadata)
if ("latestData" %in% colnames(stations_metadata)) {
# Continue with operations on latestData
} else {
stop("latestData column not found in the dataset.")
}
colnames(stations_metadata)
library(httr)
library(jsonlite)
library(ggplot2)
library(DescTools)
library(tidyverse)
library(magrittr)
library(rlang)
library(lubridate)
library(anytime)
GQL <- function(query,
...,
.token = NULL,
.variables = NULL,
.operationName = NULL,
.url = url) {
pbody <-
list(query = query,
variables = .variables,
operationName = .operationName)
if (is.null(.token)) {
res <- POST(.url, body = pbody, encode = "json", ...)
} else {
auth_header <- paste("bearer", .token)
res <-
POST(
.url,
body = pbody,
encode = "json",
add_headers(Authorization = auth_header),
...
)
}
res <- content(res, as = "parsed", encoding = "UTF-8")
if (!is.null(res$errors)) {
warning(toJSON(res$errors))
}
res$data
}
# The URL we will use is stored below:
url <- "https://www.vegvesen.no/trafikkdata/api/"
# Let's figure out which sensor stations that are operable.
# The query below extracts all the stations, with a date for
# when the station was in operation as well as a long/latitude.
qry <-
'
{
trafficRegistrationPoints {
id
name
latestData {
volumeByDay
}
location {
coordinates {
latLon {
lat
lon
}
}
}
}
}
'
# Allright - let's try submitting the query:
stations <-GQL
stations()
# Allright - let's try submitting the query:
stations <-GQL
stations
length(stations)
length(stations[[1]])
stations[[1]][[1]] %>%
as.tibble()
stations_metadata[[1]][[1]] %>%
as.tibble()
stations_metadata %>%
as.tibble()
stations_metadata[[1]][[1]] %>%
as.tibble()
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind
stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind %>%
head(1) %>%
select(latestData) %>%
pull()
stations_metadata [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, 1, .default = NA_character_)
)
stations_metadata [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(
latestData = map_chr(latestData, 1, .default = NA_character_)
)
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
stations [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist))
stations [[1]] %>%
map(as_tibble) %>%
list_rbind()
stations_metadata [[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
transform_metadata_to_df <- function(stations_metadata) {
df <- stations_metadata[[1]] %>%
map(as_tibble) %>%
list_rbind() %>%
mutate(latestData = map_chr(latestData, 1, .default = NA_character_)) %>%
mutate(latestData = as_datetime(latestData, tz = "Europe/Berlin")) %>%
mutate(location = map(location, unlist)) %>%
mutate(
lat = map_dbl(location, "latLon.lat"),
lon = map_dbl(location, "latLon.lon")
) %>%
select(-location)
return(df)
}
stations_metadata_df <-
stations_metadata %>%
transform_metadata_to_df(.)
stations_metadata_df
